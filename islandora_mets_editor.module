<?php

/**
 * @file
 * Defines all the hooks this module implements.
 *
 * islandora_mets_editor.module: defines paths (drupal menu items) as entry points.
 *
 */

// Permissions.
define('ISLANDORA_METS_EDITOR', 'mets editor');

// METS editor layouts:
define('ISLANDORA_METS_EDITOR_SIMPLE', 0);
define('ISLANDORA_METS_EDITOR_BIG', 1);
define('ISLANDORA_METS_EDITOR_SMALL', 2);

/**
 * Implements hook_menu().
 */
function islandora_mets_editor_menu() {
  return array(
    'admin/islandora/mets_editor' => array(
      'title' => 'Islandora METS Editor',
      'description' => 'Settings for the Islandora METS Editor module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_mets_editor_admin_form'),
      'access arguments' => array(ISLANDORA_METS_EDITOR),
      'file' => 'includes/admin.form.inc',
    ),
    'islandora/object/%islandora_object/manage/mets_editor' => array(
      'title' => 'METS editor',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_mets_editor_form', 2),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/editor.form.inc',
      'access arguments' => array(ISLANDORA_METS_EDITOR),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function islandora_mets_editor_permission() {
  return array(
    ISLANDORA_METS_EDITOR => array(
      'title' => t('Use the METS editor'),
      'description' => t('User can edit METS datastreams per object.'),
    ),
  );
}

/**
 * Implements hook_presprocess_theme().
 *
 * This code will add the javascript needed for the METS editor.
 */
function islandora_mets_editor_preprocess_page(&$vars) {
  $item = menu_get_item();
  if (is_array($item)) {
    if ($item['path'] == 'islandora/object/%/manage/mets_editor') {
      $path = drupal_get_path('module', 'islandora_mets_editor');
      drupal_add_js('misc/jquery-3.1.1.min.js');
      drupal_add_js($path . '/js/mets_editor.js');

      drupal_add_js('sites/all/libraries/xonomy/xonomy.js');
      drupal_add_css('sites/all/libraries/xonomy/xonomy.css');
      module_load_include('inc', 'upitt_workflow', 'includes/report.form');
      $xml = islandora_mets_editor_generate_METS_xml($item['map'][2]);
      $docSpec = islandora_mets_editor_docSpec();
      drupal_add_js(islandora_mets_editor_xonomy_editor_javascript_call_script($xml, $docSpec, 'xonomy_editor'), 'inline');
      // drupal_add_js($path . '/js/jquery-noconflict.js');
//      drupal_add_js($path . '/js/jquery-noconflict.js');

      
/*      drupal_add_js('(function ($) {
Drupal.behaviors.yourBehaviorName = {
  attach: function (context, settings) {
    start_xonomy_editor();
  }
};
})(jQuery);', 'inline');
*/
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function islandora_mets_editor_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $islandora_object = (isset($router_item['map'][2]) ) ? $router_item['map'][2] : NULL;
  $class = is_object($islandora_object) ? get_class($islandora_object) : '';

  // Assume the object is not a paged-object model
  $is_paged_object = FALSE;
  if ($class == 'IslandoraFedoraObject') {
    $is_paged_object = (!(array_search('islandora:bookCModel', $islandora_object->models) === FALSE) ||
      !(array_search('islandora:newspaperIssueCModel', $islandora_object->models) === FALSE) ||
      !(array_search('islandora:manuscriptCModel', $islandora_object->models) === FALSE));
  }

  // If the object is NOT a paged object, then remove the "METS Editor" sub-menu item.
  if (!$is_paged_object && isset($data['tabs']) && isset($data['tabs'][1])) {
    foreach ($data['tabs'][1]['output'] as $key => $tab) {
      if (isset($tab['#link']) && isset($tab['#link']['path']) && $tab['#link']['path'] == 'islandora/object/%/manage/mets_editor') {
        unset($data['tabs'][1]['output'][$key]);
      }
    }
  }
}

function islandora_mets_editor_xonomy_editor_javascript_call_script($xml, $docSpec, $editor_id = 'xonomy_editor') {
  return 'function start_xonomy_editor() {
    var docSpec=' . $docSpec . '
    var xml="' . $xml . '";
    var editor=document.getElementById("' . $editor_id . '");
    Xonomy.render(xml, editor, docSpec);
  }
  function harvest() {
    var xml=Xonomy.harvest();
    //do something with xml...
    $(\'#xmlfile\').text(xml);
    return false;
  }';
}

function islandora_mets_editor_docSpec() {
  return '{
	onchange: function(){
          
	},
	validate: function(jsElement){
		if(typeof(jsElement)=="string") jsElement=Xonomy.xml2js(jsElement);
		var valid=true;
		var elementSpec=this.elements[jsElement.name];
		if(elementSpec.validate) {
			elementSpec.validate(jsElement); //validate the element
		}
		for(var iAttribute=0; iAttribute<jsElement.attributes.length; iAttribute++) {
			var jsAttribute=jsElement.attributes[iAttribute];
			var attributeSpec=elementSpec.attributes[jsAttribute.name];
			if(attributeSpec.validate) {
				if(!attributeSpec.validate(jsAttribute)) valid=false; //validate the attribute
			}
		}
		for(var iChild=0; iChild<jsElement.children.length; iChild++) {
			if(jsElement.children[iChild].type=="element") {
				var jsChild=jsElement.children[iChild];
				if(!this.validate(jsChild)) valid=false; //recurse to the child element
			}
		}
		return valid;
	},
	elements: {
		"mets": {
			menu: [],
			collapsed: function(jsElement){return false}
		},
                "mets:fileSec": {
                        backgroundColour: "#d6fad6",
                        menu: [],
                        collapsed: function(jsElement){return false},
                },
		"mets:fileGrp": {
			backgroundColour: "#e9e9e9",
			menu: [{
				caption: "New <mets:file>",
				action: Xonomy.newElementChild,
				actionParameter: "<mets:file ID=\'\' MIMETYPE=\'\' SEQ=\'\'/>",
				hideIf: function(jsElement){return false}
			}],
                        attributes: {
                                "TYPE": {
                                        asker: Xonomy.askString,
                                        askerParameter: {},
                                        menu: [],
                                        validate: function(jsAttribute) {
                                                if($.trim(jsAttribute.value)=="") {
                                                        Xonomy.warnings.push({htmlID: jsAttribute.htmlID, text: "The @TYPE attribute should not be empty."});
                                                        return false;
                                                }
                                                return true;
                                        },
                                },
                        },
			collapsed: function(jsElement){return false},
		},
		"mets:file": {
			//isReadOnly: function(jsMe){return true},
			//isInvisible: function(jsMe){return true},
			//displayName: "člověk",
			canDropTo: ["mets:fileGrp"],
			localDropOnly: true, // false,
			menu: [
				{	caption: "New <person> before this",
					action: Xonomy.newElementBefore,
					actionParameter: "<person name=\'\' sex=\'\'/>",
					hideIf: function(jsElement){return false}
				},
				{	caption: "New <person> after this",
					action: Xonomy.newElementAfter,
					actionParameter: "<person name=\'\' sex=\'\'/>",
					hideIf: function(jsElement){return false}
				},
				{	caption: "Add @age",
					action: Xonomy.newAttribute,
					actionParameter: {name: "age", value: ""},
					hideIf: function(jsElement){return jsElement.hasAttribute("age")}
				},
				{	caption: "Delete",
					action: Xonomy.deleteElement,
					actionParameter: null,
					hideIf: function(jsElement){return false}
				}
			],
			attributes: {
				"name": {
					asker: Xonomy.askString,
					askerParameter: {},
					menu: [],
					validate: function(jsAttribute) {
						if($.trim(jsAttribute.value)=="") {
							Xonomy.warnings.push({htmlID: jsAttribute.htmlID, text: "The @name attribute should not be empty."});
							return false;
						}
						return true;
					},
				},
				"sex": {
					shy: false,
					asker: Xonomy.askPicklist,
					askerParameter: [
						{value: "m", xdisplayValue: "muž", caption: "male"},
						{value: "f", xdisplayValue: "žen", caption: "female"},
						{value: "x", xdisplayValue: "jin", caption: "it\'s complicated"}
					],
					caption: function(jsMe){
						if(jsMe.value=="m") return "male";
						if(jsMe.value=="f") return "female";
						if(jsMe.value=="x") return "it\'s complicated";
					},
					// displayName: "pohlaví",
					// displayValue: function(jsMe){
						// if(jsMe.value=="m") return "muž";
						// if(jsMe.value=="f") return "žen";
						// if(jsMe.value=="x") return "jin";
						// return jsMe.value;
					// },
					menu: [],
					validate: function(jsAttribute) {
						if($.trim(jsAttribute.value)=="") {
							Xonomy.warnings.push({htmlID: jsAttribute.htmlID, text: "The @sex attribute should not be empty."});
							return false;
						}
						return true;
					},
				},
				"age": {
					shy: false,
					asker: Xonomy.askString,
					askerParameter: null,
					menu: [{
						caption: "Delete",
						action: Xonomy.deleteAttribute,
						actionParameter: null,
						hideIf: function(jsAttribute){return false}
					}],
					validate: function(jsAttribute) {
						if(!/^[0-9]+$/g.test(jsAttribute.value)) {
							Xonomy.warnings.push({htmlID: jsAttribute.htmlID, text: "The @age attribute should be a whole number greater than zero."});
							return false;
						}
						return true;
					},
				},
			},
			collapsed: function(jsElement){return false}
		},
                "mets:structMap": {
                        backgroundColour: "#ffd6d6",
                        menu: [{
                                caption: "New <div>",
                                action: Xonomy.newElementChild,
                                actionParameter: "<person name=\'\' sex=\'\'/>",
                                hideIf: function(jsElement){return false}
                        }],
                        collapsed: function(jsElement){return false},
                },
                "mets:div": {
                        //isReadOnly: function(jsMe){return true},
                        //isInvisible: function(jsMe){return true},
                        //displayName: "člověk",
                        canDropTo: ["mets:structMap"],
                        localDropOnly: true, // false,
                        menu: [
                                {       caption: "New <div> before this",
                                        action: Xonomy.newElementBefore,
                                        actionParameter: "<mets:div TYPE=\'page\' LABEL=\'unum\'/>",
                                        hideIf: function(jsElement){return false}
                                },
                                {       caption: "New <div> after this",
                                        action: Xonomy.newElementAfter,
                                        actionParameter: "<mets:div TYPE=\'page\' LABEL=\'unum\'/>",
                                        hideIf: function(jsElement){return false}
                                },
                                {       caption: "Add @div",
                                        action: Xonomy.newAttribute,
                                        actionParameter: {name: "div", value: ""},
                                        hideIf: function(jsElement){return jsElement.hasAttribute("div")}
                                },
                                {       caption: "Delete",
                                        action: Xonomy.deleteElement,
                                        actionParameter: null,
                                        hideIf: function(jsElement){return false}
                                }
                        ],
                        attributes: {
                                "FILEID": {
                                        asker: Xonomy.askString,
                                        askerParameter: {},
                                        menu: [],
                                        validate: function(jsAttribute) {
                                                if($.trim(jsAttribute.value)=="") {
                                                        Xonomy.warnings.push({htmlID: jsAttribute.htmlID, text: "The @name attribute should not be empty."});
                                                        return false;
                                                }
                                                return true;
                                        },
                                },
			},
		}

	}
}';
}

function islandora_mets_editor_generate_METS_xml($islandora_object) {
  // IF the object already has an item file record that has a METS file, then use this... else generate a METS from the other MASTER tif files related to the object
  // PENDING connection to the file server so that the file can be obtained from there (with paths like: /usr/local/dlxs/repository/p/pitttext/31735066873732/31735066873732.mets.xml)
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  
  $prefix = "<mets xmlns='http://www.loc.gov/METS/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:mets='http://www.loc.gov/METS/' xmlns:mods='http://www.loc.gov/MODS' xmlns:xlink='http://www.w3.org/1999/xlink' xsi:schemaLocation='http://www.loc.gov/METS/ http://www.loc.gov/standards/mets/mets.xsd'><mets:fileSec><mets:fileGrp USE='master'>";
  $mid_point = "</mets:fileGrp></mets:fileSec><mets:structMap TYPE='mixed'><mets:div TYPE='volume'>";
  $suffix = "</mets:div></mets:structMap></mets>";

  $pages = islandora_paged_content_get_pages_ri($islandora_object);
  $mets_files = $struct_maps = array();

  $seq = 0;
  foreach ($pages as $page) {
    if (isset($page['pid'])) {
      $page_obj = islandora_object_load($page['pid']);
      $name = (is_object($page_obj) && (get_class($page_obj) == 'IslandoraFedoraObject')) ? $page_obj->label : $page['label'];
      $fid = '$fid' . isset($page['page']) ? $page['page'] : 0;

      $obj_mimetype = isset($page_obj['OBJ']) ? $page_obj['OBJ']->mimetype : '';
      $jpg_mimetype = isset($page_obj['JPG']) ? $page_obj['JPG']->mimetype : '';

      if ($obj_mimetype || $jpg_mimetype) {
        $seq_padded = sprintf('%04s', $seq);

        $mets_files[] = "<mets:file ID='" . $fid . "' MIMETYPE='image/tiff' SEQ='" . $seq_padded . "'><mets:FLocat xlink:href='" . $name . "' LOCTYPE='URL'/></mets:file>";
        $struct_maps[] = "<mets:div TYPE='page' LABEL='unum'><mets:fptr FILEID='" . $fid . "'/></mets:div>";

        $seq++;
      }
    }
  }

  $xml_string = $prefix .
                implode('', $mets_files) .
                $mid_point .
                implode('', $struct_maps) .
                $suffix;

  return $xml_string;
}

/**
 * Will return all of the item file records associated with a specific object identifier.
 */
function islandora_mets_editor_paged_object_get_pages($islandora_object) {
  $link = upitt_workflow_get_databaselink('mysql_new_workflow');
  $query = 'SELECT itf.* ' .
           'FROM item i ' .
           'JOIN item_file itf ON (itf.item_id = i.id) ' .
           'WHERE i.do_id = "' . upitt_workflow_safe_qstring($link, $object_id) . '" ' .
           'ORDER BY itf.id';

  $result = mysqli_query($link, $query);
  if (!$result) {
    upitt_workflow_sql_error_die($link, $query);
  }

  $rows = array();
  while ($row = mysqli_fetch_assoc($result)) {
    $rows[] = $row;
  }
  mysqli_close($link);
  return $rows;
}