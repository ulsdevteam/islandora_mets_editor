<?php

/**
 * @file
 * Defines all the hooks this module implements.
 *
 * islandora_mets_editor.module: defines paths (drupal menu items) as entry points.
 *
 */

// Permissions.
define('ISLANDORA_METS_EDITOR', 'mets editor');

/**
 * Implements hook_menu().
 */
function islandora_mets_editor_menu() {
  return array(
    'admin/islandora/mets_editor' => array(
      'title' => 'Islandora METS Editor',
      'description' => 'Settings for the Islandora METS Editor module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_mets_editor_admin_form'),
      'access arguments' => array(ISLANDORA_METS_EDITOR),
      'file' => 'includes/admin.form.inc',
    ),
    'islandora/object/%islandora_object/manage/mets_editor' => array(
      'title' => 'METS editor',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_mets_editor_form', 2),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/editor.form.inc',
      'access arguments' => array(ISLANDORA_METS_EDITOR),
    ),
    // PHP helper function to return page image size for METS editor via AJAX call.
    'islandora/object/%islandora_object/manage/mets_editor/return_imagesize' => array(
      'page callback' => 'islandora_mets_editor_get_object_image_size',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access arguments' => array(ISLANDORA_METS_EDITOR),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function islandora_mets_editor_permission() {
  return array(
    ISLANDORA_METS_EDITOR => array(
      'title' => t('Use the METS editor'),
      'description' => t('User can edit METS datastreams per object.'),
    ),
  );
}

/**
 * Implements hook_presprocess_page().
 *
 * This code will add the javascript needed for the METS editor.
 */
function islandora_mets_editor_preprocess_page(&$vars) {
  $item = menu_get_item();
  if (is_array($item)) {
    if ($item['path'] == 'islandora/object/%/manage/mets_editor') {
/*
      module_load_include('inc', 'islandora_mets_editor', 'includes/utilities');
      $path = drupal_get_path('module', 'islandora_mets_editor');
      drupal_add_js('misc/jquery-3.1.1.min.js');
      drupal_add_js($path . '/js/mets_editor.js');

      drupal_add_js('sites/all/libraries/xonomy/xonomy.js');
      drupal_add_css('sites/all/libraries/xonomy/xonomy.css');
      module_load_include('inc', 'upitt_workflow', 'includes/report.form');
      $xml = islandora_mets_editor_generate_METS_xml($item['map'][2]);
      $docSpec = islandora_mets_editor_docSpec();
      drupal_add_js(islandora_mets_editor_xonomy_editor_javascript_call_script($xml, $docSpec, 'xonomy_editor'), 'inline');
      drupal_add_css($path . '/css/mets_editor.css');
      // drupal_add_js($path . '/js/jquery-noconflict.js');
//      drupal_add_js($path . '/js/jquery-noconflict.js');
*/
      
/*      drupal_add_js('(function ($) {
Drupal.behaviors.yourBehaviorName = {
  attach: function (context, settings) {
    start_xonomy_editor();
  }
};
})(jQuery);', 'inline');
*/
    }
  }
}

function islandora_mets_editor_theme() {
  return array(
    'islandora_mets_editor_editor_markup' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/editor-markup',
      'variables' => array(
        'islandora_object' => NULL,
        'pages' => NULL
      ),
    ),
  );
}


/**
 * Implements hook_menu_local_tasks_alter().
 */
function islandora_mets_editor_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $islandora_object = (isset($router_item['map'][2]) ) ? $router_item['map'][2] : NULL;
  $class = is_object($islandora_object) ? get_class($islandora_object) : '';

  // Assume the object is not a paged-object model
  $is_paged_object = FALSE;
  if ($class == 'IslandoraFedoraObject') {
    $is_paged_object = (!(array_search('islandora:bookCModel', $islandora_object->models) === FALSE) ||
      !(array_search('islandora:newspaperIssueCModel', $islandora_object->models) === FALSE) ||
      !(array_search('islandora:manuscriptCModel', $islandora_object->models) === FALSE));
  }

  // If the object is NOT a paged object, then remove the "METS Editor" sub-menu item.
  if (!$is_paged_object && isset($data['tabs']) && isset($data['tabs'][1])) {
    foreach ($data['tabs'][1]['output'] as $key => $tab) {
      if (isset($tab['#link']) && isset($tab['#link']['path']) && $tab['#link']['path'] == 'islandora/object/%/manage/mets_editor') {
        unset($data['tabs'][1]['output'][$key]);
      }
    }
  }
}

/**
 * Will return all of the item file records associated with a specific object identifier.
 */
function islandora_mets_editor_paged_object_get_pages($islandora_object) {
  $link = upitt_workflow_get_databaselink('mysql_new_workflow');
  $query = 'SELECT itf.* ' .
           'FROM item i ' .
           'JOIN item_file itf ON (itf.item_id = i.id) ' .
           'WHERE i.do_id = "' . upitt_workflow_safe_qstring($link, $object_id) . '" ' .
           'ORDER BY itf.id';

  $result = mysqli_query($link, $query);
  if (!$result) {
    upitt_workflow_sql_error_die($link, $query);
  }

  $rows = array();
  while ($row = mysqli_fetch_assoc($result)) {
    $rows[] = $row;
  }
  mysqli_close($link);
  return $rows;
}

/**
 * Function that will look up the image width and height from the info in the parent
 * paged-object's pages array (via islandora_paged_content_get_pages_ri) -- failing 
 * that, it will inspect the JP2 RELS-EXT of the object that is passed.
 */
function islandora_mets_editor_get_object_image_size($islandora_object) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  $height = $width = 0;
  if (is_object($islandora_object)) {
    $isPageOf = $islandora_object->relationships->get(ISLANDORA_RELS_EXT_URI, 'isPageOf');
    $parent_paged_object_PID = (isset($isPageOf[0]) && isset($isPageOf[0]['object'])) ? $isPageOf[0]['object']['value'] : '';
    if ($parent_paged_object_PID) {
      $parent_paged_object = islandora_object_load($parent_paged_object_PID);
      $paged_object_pages = islandora_paged_content_get_pages_ri($parent_paged_object);
      $this_page = (isset($paged_object_pages[$islandora_object->id])) ? $paged_object_pages[$islandora_object->id] : FALSE;
      if ($this_page) {
        $width = $this_page['width'];
        $height = $this_page['height'];
      }
    } else {
      // Get the page size by inspecting this page object's JP2 datastream
      $jp2_datastream = $islandora_object['JP2'];
      $rels = $jp2_datastream->relationships;
      $width_rels_in = $rels->get(ISLANDORA_RELS_EXT_URI, 'width');
      $width = $width_rels_in[0]['object']['value'];
      $height_rels_in = $rels->get(ISLANDORA_RELS_EXT_URI, 'height');
      $height = $height_rels_in[0]['object']['value'];

    }
    echo "<pre>" . number_format($width) . " pixels wide, " . number_format($height) . " pixels tall.</pre>";
  }

  if (!$width && !$height) {
    echo 'No page is currently selected.';
  }
  // Since this is an AJAX handler for a javascript call, exit the Drupal framework now.
  exit;
}